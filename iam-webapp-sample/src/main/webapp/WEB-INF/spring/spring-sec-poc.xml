<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:security="http://www.springframework.org/schema/security" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
                        ">
                        
	<bean id="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>cas.properties</value>
			</list>
		</property>
		<property name="ignoreResourceNotFound" value="true" />
		<property name="localOverride" value="true" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>

	<!-- local CAS check -->
	<bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
		<property name="service" value="${myapp.server}/${myapp.instance}/j_spring_cas_security_check" />
		<property name="sendRenew" value="false" />
	</bean>

	<!-- local http entry -->
	<security:http entry-point-ref="casEntryPoint">
		<security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
		<security:custom-filter position="CAS_FILTER" ref="casFilter" />
	</security:http>

	<bean id="casFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
	</bean>

	<bean id="casEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
		<property name="loginUrl" value="${cas.server}/login" />
		<property name="serviceProperties" ref="serviceProperties" />
	</bean>

	<!-- Authentication Manager -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="casAuthenticationProvider" />
	</security:authentication-manager>
	
	<security:user-service id="userService">
    	<security:user name="ADMIN_IAM" password="IAM" authorities="ROLE_SUPERVISOR,ROLE_USER" />
  	</security:user-service>
  	
	
	<bean id="casAuthenticationProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
		<property name="authenticationUserDetailsService">
			<bean class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
				<constructor-arg ref="userService" />
			</bean>
		</property>
		<property name="serviceProperties" ref="serviceProperties" />
		<property name="ticketValidator">
			<bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
				<constructor-arg index="0" value="${cas.server}" />
			</bean>
		</property>
		<property name="key" value="${myapp.uniqueKey}" />
	</bean>





	<!-- ========================= -->

	  <!-- spring sec 3.0
	<bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
		<security:filter-chain-map path-type="ant">
			<security:filter-chain pattern="/" filters="casValidationFilter, wrappingFilter" />
			<security:filter-chain pattern="/secure/receptor" filters="casValidationFilter" />
			<security:filter-chain pattern="/j_spring_security_logout" filters="logoutFilter,etf,filterInterceptor" />
			<security:filter-chain pattern="/**" filters="casAuthenticationFilter, casValidationFilter, wrappingFilter, securityContextFilter, j2eePreAuthFilter, logoutFilter, etf, filterInterceptor" />
		</security:filter-chain-map>
	</bean>
	 -->  
	 <!-- spring sec 3.1 -->
	<bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
		<constructor-arg>
	    <list>
				<security:filter-chain pattern="/" filters="casValidationFilter, wrappingFilter" />
				<security:filter-chain pattern="/secure/receptor" filters="casValidationFilter" />
				<security:filter-chain pattern="/j_spring_security_logout" filters="logoutFilter,etf,filterInterceptor" />
				<security:filter-chain pattern="/**" filters="casAuthenticationFilter, casValidationFilter, wrappingFilter, securityContextFilter, j2eePreAuthFilter, logoutFilter, etf, filterInterceptor" />
	    </list>
	 	 </constructor-arg>
	</bean>
	   
<!--     
	<bean id="securityContextFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter" />
	 
	 

	<bean id="preAuthAuthProvider" class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
		<property name="preAuthenticatedUserDetailsService">
			<bean id="userDetailsServiceWrapper" class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
				<property name="userDetailsService" ref="userService" />
			</bean>
		</property>
	</bean>
	
	<bean id="preauthAuthProvider" class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
	    <property name="preAuthenticatedUserDetailsService">
	      <bean id="userDetailsServiceWrapper" class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
	        <property name="userDetailsService" ref="userDetailsService"/>
	      </bean>
	    </property>
    </bean>
      <security:authentication-manager alias="authenticationManager">
      <security:authentication-provider ref="preauthAuthProvider" />
    </security:authentication-manager>
     -->
	
	
	    <!-- 
	<bean id="preAuthEntryPoint" class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint" />
	 
	    
	<bean id="j2eePreAuthFilter"
		class="org.springframework.security.web.authentication.preauth.j2ee.J2eePreAuthenticatedProcessingFilter">
		        
		<property name="authenticationManager" ref="authenticationManager" />
		        
		<property name="authenticationDetailsSource">
			            
			<bean
				class="org.springframework.security.web.authentication.WebAuthenticationDetailsSource" />
			        
		</property>
		    
	</bean>
	 
	    
	<bean id="logoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		        
		<constructor-arg value="/" />
		        
		<constructor-arg>
			            
			<list>
				                
				<bean
					class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
				            
			</list>
			        
		</constructor-arg>
		    
	</bean>
	 
	    
	<bean id="servletContext" class="org.springframework.web.context.support.ServletContextFactoryBean" />
	 
	    
	<bean id="etf"
		class="org.springframework.security.web.access.ExceptionTranslationFilter">
		        
		<property name="authenticationEntryPoint" ref="preAuthEntryPoint" />
		    
	</bean>
	 
	    
	<bean id="httpRequestAccessDecisionManager"
		class="org.springframework.security.access.vote.AffirmativeBased">
		        
		<property name="allowIfAllAbstainDecisions" value="false" />
		        
		<property name="decisionVoters">
			            
			<list>
				                
				<ref bean="roleVoter" />
				            
			</list>
			        
		</property>
		    
	</bean>
	 
	   
	<bean id="filterInterceptor"
		class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		        
		<property name="authenticationManager" ref="authenticationManager" />
		        
		<property name="accessDecisionManager" ref="httpRequestAccessDecisionManager" />
		        
		<property name="securityMetadataSource">
			            
			<security:filter-invocation-definition-source>
				                
				<security:intercept-url pattern="/secure/extreme/**"
					access="ROLE_SUPERVISOR" />
				                
				<security:intercept-url pattern="/secure/**" access="ROLE_USER" />
				                
				<security:intercept-url pattern="/**" access="ROLE_USER" />
				            
			</security:filter-invocation-definition-source>
			        
		</property>
		    
	</bean>
	 
	    
	<bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter" />
	 
	    
	<bean id="securityContextHolderAwareRequestFilter" class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter" />
	     
	    
	<bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator" id="ticketValidator">
		        
		<constructor-arg index="0" value="${cas.server}" />
		        
		<property name="proxyGrantingTicketStorage" ref="proxyGrantingTicketStorage" />
		        
		<property name="proxyCallbackUrl" value="${myapp.server}/${myapp.instance}/" />
		    
	</bean>
	 
	 CAS ticket store 
	    
	<bean id="proxyGrantingTicketStorage"
		class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl" />
	 
	    
	<bean id="casAuthenticationFilter"
		class="org.jasig.cas.client.authentication.AuthenticationFilter">
		        
		<property name="casServerLoginUrl" value="${cas.server}/login" />
		        
		<property name="serverName" value="${myapp.server}" />
		    
	</bean>
	 
	    
	<bean id="casValidationFilter"
		class="org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter">
		        
		<property name="serverName" value="${myapp.server}" />
		        
		<property name="exceptionOnValidationFailure" value="true" />
		        
		<property name="proxyGrantingTicketStorage" ref="proxyGrantingTicketStorage" />
		        
		<property name="redirectAfterValidation" value="true" />
		        
		<property name="ticketValidator" ref="ticketValidator" />
		        
		<property name="proxyReceptorUrl" value="/" />
		    
	</bean>
	 
	    
	<bean id="wrappingFilter"
		class="org.jasig.cas.client.util.HttpServletRequestWrapperFilter" />


-->

</beans>